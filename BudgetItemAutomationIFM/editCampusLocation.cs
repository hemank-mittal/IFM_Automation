///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace BudgetItemAutomationIFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The editCampusLocation recording.
    /// </summary>
    [TestModule("4ca5153f-e951-4243-a4f5-cdf739fe4aa2", ModuleType.Recording, 1)]
    public partial class editCampusLocation : ITestModule
    {
        /// <summary>
        /// Holds an instance of the BudgetItemAutomationIFMRepository repository.
        /// </summary>
        public static BudgetItemAutomationIFMRepository repo = BudgetItemAutomationIFMRepository.Instance;

        static editCampusLocation instance = new editCampusLocation();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public editCampusLocation()
        {
            editedAddress1 = "";
            edittedName = "";
            oldName = "";
            optionIndex = "";
            editedAddress2 = "";
            editedCity = "";
            editedCounty = "";
            CL_Type = "";
            CL_zipcode = "";
            CL_country = "";
            CL_state = "";
            editedTerritory = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static editCampusLocation Instance
        {
            get { return instance; }
        }

#region Variables

        string _editedAddress1;

        /// <summary>
        /// Gets or sets the value of variable editedAddress1.
        /// </summary>
        [TestVariable("cd2e2b89-d5ae-49eb-bfd4-ed8384b5462b")]
        public string editedAddress1
        {
            get { return _editedAddress1; }
            set { _editedAddress1 = value; }
        }

        string _edittedName;

        /// <summary>
        /// Gets or sets the value of variable edittedName.
        /// </summary>
        [TestVariable("e6ea1c21-9f80-4be5-886c-1a075b7358d2")]
        public string edittedName
        {
            get { return _edittedName; }
            set { _edittedName = value; }
        }

        string _oldName;

        /// <summary>
        /// Gets or sets the value of variable oldName.
        /// </summary>
        [TestVariable("2ecfe47d-2131-4f86-bdb8-4e67767ef0c2")]
        public string oldName
        {
            get { return _oldName; }
            set { _oldName = value; }
        }

        string _editedAddress2;

        /// <summary>
        /// Gets or sets the value of variable editedAddress2.
        /// </summary>
        [TestVariable("0238253b-94d8-4bcd-b314-5eb41dc2e367")]
        public string editedAddress2
        {
            get { return _editedAddress2; }
            set { _editedAddress2 = value; }
        }

        string _editedCity;

        /// <summary>
        /// Gets or sets the value of variable editedCity.
        /// </summary>
        [TestVariable("c4c613f4-7976-48ec-ac90-c50b85f87286")]
        public string editedCity
        {
            get { return _editedCity; }
            set { _editedCity = value; }
        }

        string _editedCounty;

        /// <summary>
        /// Gets or sets the value of variable editedCounty.
        /// </summary>
        [TestVariable("ee00d053-fb25-44f3-b581-60ab9f7d6f82")]
        public string editedCounty
        {
            get { return _editedCounty; }
            set { _editedCounty = value; }
        }

        string _CL_Type;

        /// <summary>
        /// Gets or sets the value of variable CL_Type.
        /// </summary>
        [TestVariable("3cdf7579-57d1-4258-a769-0fbb9469ac81")]
        public string CL_Type
        {
            get { return _CL_Type; }
            set { _CL_Type = value; }
        }

        string _CL_zipcode;

        /// <summary>
        /// Gets or sets the value of variable CL_zipcode.
        /// </summary>
        [TestVariable("e47e10ec-0103-45ce-ba51-87f9ec853819")]
        public string CL_zipcode
        {
            get { return _CL_zipcode; }
            set { _CL_zipcode = value; }
        }

        string _CL_state;

        /// <summary>
        /// Gets or sets the value of variable CL_state.
        /// </summary>
        [TestVariable("ed88281c-e7ef-4e36-ba5f-886f498c5797")]
        public string CL_state
        {
            get { return _CL_state; }
            set { _CL_state = value; }
        }

        string _editedTerritory;

        /// <summary>
        /// Gets or sets the value of variable editedTerritory.
        /// </summary>
        [TestVariable("21f39e59-bb96-4ec0-895b-45b0768bf5c7")]
        public string editedTerritory
        {
            get { return _editedTerritory; }
            set { _editedTerritory = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable domain.
        /// </summary>
        [TestVariable("0e49bfa6-0c8f-4999-ad77-5babbb4e74af")]
        public string domain
        {
            get { return repo.domain; }
            set { repo.domain = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable optionIndex.
        /// </summary>
        [TestVariable("6ec2aaa5-271f-4943-98ac-029d57bb7a07")]
        public string optionIndex
        {
            get { return repo.optionIndex; }
            set { repo.optionIndex = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable CL_country.
        /// </summary>
        [TestVariable("22b317c8-09dc-42c3-adc1-29d4585a70cc")]
        public string CL_country
        {
            get { return repo.CL_country; }
            set { repo.CL_country = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            HelperMethodsCollection.waitForLoading();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ButtonTagEdit1' at Center.", repo.ApplicationUnderTest.ButtonTagEdit1Info, new RecordItemIndex(1));
            repo.ApplicationUnderTest.ButtonTagEdit1.Click();
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.waitForLoading();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TitleInputBar' at Center.", repo.ApplicationUnderTest.TitleInputBarInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.TitleInputBar.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.TitleInputBar' and assigning its value to variable 'oldName'.", repo.ApplicationUnderTest.TitleInputBarInfo, new RecordItemIndex(4));
            oldName = repo.ApplicationUnderTest.TitleInputBar.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            edittedName = HelperMethodsCollection.getEdittedName(oldName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.TitleInputBar'.", repo.ApplicationUnderTest.TitleInputBarInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.TitleInputBar.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$edittedName' with focus on 'ApplicationUnderTest.TitleInputBar'.", repo.ApplicationUnderTest.TitleInputBarInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.TitleInputBar.PressKeys(edittedName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.DropdownBtn' at Center.", repo.ApplicationUnderTest.CampusLocationForm.DropdownBtnInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.CampusLocationForm.DropdownBtn.Click();
            Delay.Milliseconds(0);
            
            optionIndex = ValueConverter.ToString(HelperMethodsCollection.getDifferentOption(repo.ApplicationUnderTest.CampusLocationForm.campusType_dropdown));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.CampusLocationForm.CLType_Dynamic' and assigning its value to variable 'CL_Type'.", repo.ApplicationUnderTest.CampusLocationForm.CLType_DynamicInfo, new RecordItemIndex(10));
            CL_Type = repo.ApplicationUnderTest.CampusLocationForm.CLType_Dynamic.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.CLType_Dynamic' at Center.", repo.ApplicationUnderTest.CampusLocationForm.CLType_DynamicInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.CampusLocationForm.CLType_Dynamic.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.AddressLine1Field' at Center.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine1FieldInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.CampusLocationForm.AddressLine1Field.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.CampusLocationForm.AddressLine1Field' and assigning its value to variable 'oldName'.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine1FieldInfo, new RecordItemIndex(13));
            oldName = repo.ApplicationUnderTest.CampusLocationForm.AddressLine1Field.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            editedAddress1 = HelperMethodsCollection.getEdittedName(oldName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.CampusLocationForm.AddressLine1Field'.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine1FieldInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.CampusLocationForm.AddressLine1Field.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$editedAddress1' with focus on 'ApplicationUnderTest.CampusLocationForm.AddressLine1Field'.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine1FieldInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.CampusLocationForm.AddressLine1Field.PressKeys(editedAddress1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.AddressLine2Field' at Center.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine2FieldInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.CampusLocationForm.AddressLine2Field.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.CampusLocationForm.AddressLine2Field' and assigning its value to variable 'oldName'.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine2FieldInfo, new RecordItemIndex(18));
            oldName = repo.ApplicationUnderTest.CampusLocationForm.AddressLine2Field.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            editedAddress2 = HelperMethodsCollection.getEdittedName(oldName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.CampusLocationForm.AddressLine2Field'.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine2FieldInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.CampusLocationForm.AddressLine2Field.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$editedAddress2' with focus on 'ApplicationUnderTest.CampusLocationForm.AddressLine2Field'.", repo.ApplicationUnderTest.CampusLocationForm.AddressLine2FieldInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.CampusLocationForm.AddressLine2Field.PressKeys(editedAddress2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.cityField' at Center.", repo.ApplicationUnderTest.CampusLocationForm.cityFieldInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.CampusLocationForm.cityField.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.CampusLocationForm.cityField' and assigning its value to variable 'oldName'.", repo.ApplicationUnderTest.CampusLocationForm.cityFieldInfo, new RecordItemIndex(23));
            oldName = repo.ApplicationUnderTest.CampusLocationForm.cityField.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            editedCity = HelperMethodsCollection.getEdittedName(oldName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.CampusLocationForm.cityField'.", repo.ApplicationUnderTest.CampusLocationForm.cityFieldInfo, new RecordItemIndex(25));
            repo.ApplicationUnderTest.CampusLocationForm.cityField.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$editedCity' with focus on 'ApplicationUnderTest.CampusLocationForm.cityField'.", repo.ApplicationUnderTest.CampusLocationForm.cityFieldInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.CampusLocationForm.cityField.PressKeys(editedCity);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.CampusLocationForm.CampusZipcode' and assigning its value to variable 'CL_zipcode'.", repo.ApplicationUnderTest.CampusLocationForm.CampusZipcodeInfo, new RecordItemIndex(27));
            CL_zipcode = repo.ApplicationUnderTest.CampusLocationForm.CampusZipcode.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusCountyField' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusCountyFieldInfo, new RecordItemIndex(28));
            repo.ApplicationUnderTest.CampusLocationForm.campusCountyField.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.CampusLocationForm.campusCountyField' and assigning its value to variable 'oldName'.", repo.ApplicationUnderTest.CampusLocationForm.campusCountyFieldInfo, new RecordItemIndex(29));
            oldName = repo.ApplicationUnderTest.CampusLocationForm.campusCountyField.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            editedCounty = HelperMethodsCollection.getEdittedName(oldName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.CampusLocationForm.campusCountyField'.", repo.ApplicationUnderTest.CampusLocationForm.campusCountyFieldInfo, new RecordItemIndex(31));
            repo.ApplicationUnderTest.CampusLocationForm.campusCountyField.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$editedCounty' with focus on 'ApplicationUnderTest.CampusLocationForm.campusCountyField'.", repo.ApplicationUnderTest.CampusLocationForm.campusCountyFieldInfo, new RecordItemIndex(32));
            repo.ApplicationUnderTest.CampusLocationForm.campusCountyField.PressKeys(editedCounty);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusCountryDropdown' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusCountryDropdownInfo, new RecordItemIndex(33));
            repo.ApplicationUnderTest.CampusLocationForm.campusCountryDropdown.Click();
            Delay.Milliseconds(0);
            
            optionIndex = ValueConverter.ToString(HelperMethodsCollection.getDifferentOption(repo.ApplicationUnderTest.CampusLocationForm.campusCountry_Dropdown));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.CampusLocationForm.campusCountry_dynamic' and assigning its value to variable 'CL_country'.", repo.ApplicationUnderTest.CampusLocationForm.campusCountry_dynamicInfo, new RecordItemIndex(35));
            CL_country = repo.ApplicationUnderTest.CampusLocationForm.campusCountry_dynamic.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusCountry_dynamic' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusCountry_dynamicInfo, new RecordItemIndex(36));
            repo.ApplicationUnderTest.CampusLocationForm.campusCountry_dynamic.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusStateDropdown' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusStateDropdownInfo, new RecordItemIndex(37));
            repo.ApplicationUnderTest.CampusLocationForm.campusStateDropdown.Click();
            Delay.Milliseconds(0);
            
            optionIndex = ValueConverter.ToString(HelperMethodsCollection.getDifferentOption(repo.ApplicationUnderTest.CampusLocationForm.campusState_Dropdown));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.CampusLocationForm.campusState_dynamic' and assigning its value to variable 'CL_state'.", repo.ApplicationUnderTest.CampusLocationForm.campusState_dynamicInfo, new RecordItemIndex(39));
            CL_state = repo.ApplicationUnderTest.CampusLocationForm.campusState_dynamic.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusState_dynamic' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusState_dynamicInfo, new RecordItemIndex(40));
            repo.ApplicationUnderTest.CampusLocationForm.campusState_dynamic.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusTerritoryDropdown' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusTerritoryDropdownInfo, new RecordItemIndex(41));
            repo.ApplicationUnderTest.CampusLocationForm.campusTerritoryDropdown.Click();
            Delay.Milliseconds(0);
            
            optionIndex = ValueConverter.ToString(HelperMethodsCollection.selectDifferentOption(repo.ApplicationUnderTest.CampusLocationForm.campusTerritory_dropdown));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusTerritory_Checked' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusTerritory_CheckedInfo, new RecordItemIndex(43));
            repo.ApplicationUnderTest.CampusLocationForm.campusTerritory_Checked.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusTerritory_Dynamic' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusTerritory_DynamicInfo, new RecordItemIndex(44));
            repo.ApplicationUnderTest.CampusLocationForm.campusTerritory_Dynamic.Click();
            Delay.Milliseconds(0);
            
            editedTerritory = HelperMethodsCollection.getCommaSeperatedString_FromRepo("/dom[@domain='app.ifm360.com']//div[#'scrollele']//form[@action='https://app.ifm360.com/CampusFacilities']//div[10]/?/?/tag[@tagname='ng-multiselect-dropdown']/div/div[2]/ul[2]/li/input[@checked='True']");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.campusTerritoryDropdown' at Center.", repo.ApplicationUnderTest.CampusLocationForm.campusTerritoryDropdownInfo, new RecordItemIndex(46));
            repo.ApplicationUnderTest.CampusLocationForm.campusTerritoryDropdown.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CampusLocationForm.Save' at Center.", repo.ApplicationUnderTest.CampusLocationForm.SaveInfo, new RecordItemIndex(47));
            repo.ApplicationUnderTest.CampusLocationForm.Save.Click();
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.waitForLoading();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
