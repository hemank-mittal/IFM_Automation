///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace BudgetItemAutomationIFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The validateCreateField recording.
    /// </summary>
    [TestModule("063e8c02-f80a-4746-91ba-9fbaae751a8e", ModuleType.Recording, 1)]
    public partial class validateCreateField : ITestModule
    {
        /// <summary>
        /// Holds an instance of the BudgetItemAutomationIFMRepository repository.
        /// </summary>
        public static BudgetItemAutomationIFMRepository repo = BudgetItemAutomationIFMRepository.Instance;

        static validateCreateField instance = new validateCreateField();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public validateCreateField()
        {
            itemName = "";
            unitType = "";
            fieldType = "";
            siteBuildingRoom = "";
            sequenceNumber = "";
            parentName = "";
            isGroup = "";
            visibleItemName = "";
            visibleUnitType = "";
            visibleFieldType = "";
            visibleSiteBuildingRoom = "";
            visiblesequenceNumber = "";
            visibleParentName = "";
            visibleIsGroup = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static validateCreateField Instance
        {
            get { return instance; }
        }

#region Variables

        string _itemName;

        /// <summary>
        /// Gets or sets the value of variable itemName.
        /// </summary>
        [TestVariable("8d1ec6af-9f77-456c-a591-797b3bc2bc37")]
        public string itemName
        {
            get { return _itemName; }
            set { _itemName = value; }
        }

        string _unitType;

        /// <summary>
        /// Gets or sets the value of variable unitType.
        /// </summary>
        [TestVariable("03fd7c38-2a98-4fbf-931b-5ee8bbfb9dc7")]
        public string unitType
        {
            get { return _unitType; }
            set { _unitType = value; }
        }

        string _fieldType;

        /// <summary>
        /// Gets or sets the value of variable fieldType.
        /// </summary>
        [TestVariable("c9bb252f-8a24-4754-bbdb-5592aa8103b0")]
        public string fieldType
        {
            get { return _fieldType; }
            set { _fieldType = value; }
        }

        string _siteBuildingRoom;

        /// <summary>
        /// Gets or sets the value of variable siteBuildingRoom.
        /// </summary>
        [TestVariable("14684a61-30d8-471c-8eb8-c16c488064d1")]
        public string siteBuildingRoom
        {
            get { return _siteBuildingRoom; }
            set { _siteBuildingRoom = value; }
        }

        string _sequenceNumber;

        /// <summary>
        /// Gets or sets the value of variable sequenceNumber.
        /// </summary>
        [TestVariable("0903a670-3072-40dc-81ac-886248a7d525")]
        public string sequenceNumber
        {
            get { return _sequenceNumber; }
            set { _sequenceNumber = value; }
        }

        string _parentName;

        /// <summary>
        /// Gets or sets the value of variable parentName.
        /// </summary>
        [TestVariable("3ae2a4a0-b5fb-4e3f-8b50-010438265d43")]
        public string parentName
        {
            get { return _parentName; }
            set { _parentName = value; }
        }

        string _isGroup;

        /// <summary>
        /// Gets or sets the value of variable isGroup.
        /// </summary>
        [TestVariable("b30da57d-b5c8-4795-bc0e-0411bab76a3b")]
        public string isGroup
        {
            get { return _isGroup; }
            set { _isGroup = value; }
        }

        string _visibleItemName;

        /// <summary>
        /// Gets or sets the value of variable visibleItemName.
        /// </summary>
        [TestVariable("7ecb6dff-ed56-4523-9aab-bb0e767bf18c")]
        public string visibleItemName
        {
            get { return _visibleItemName; }
            set { _visibleItemName = value; }
        }

        string _visibleUnitType;

        /// <summary>
        /// Gets or sets the value of variable visibleUnitType.
        /// </summary>
        [TestVariable("ad67e1d5-7402-4dee-b886-cfb3abcd9ce0")]
        public string visibleUnitType
        {
            get { return _visibleUnitType; }
            set { _visibleUnitType = value; }
        }

        string _visibleFieldType;

        /// <summary>
        /// Gets or sets the value of variable visibleFieldType.
        /// </summary>
        [TestVariable("c15e8367-eb5b-493f-b3e8-766cb280a64a")]
        public string visibleFieldType
        {
            get { return _visibleFieldType; }
            set { _visibleFieldType = value; }
        }

        string _visibleSiteBuildingRoom;

        /// <summary>
        /// Gets or sets the value of variable visibleSiteBuildingRoom.
        /// </summary>
        [TestVariable("c165d300-2f97-4208-82a8-51ab3a87ab05")]
        public string visibleSiteBuildingRoom
        {
            get { return _visibleSiteBuildingRoom; }
            set { _visibleSiteBuildingRoom = value; }
        }

        string _visiblesequenceNumber;

        /// <summary>
        /// Gets or sets the value of variable visiblesequenceNumber.
        /// </summary>
        [TestVariable("580a4488-6427-4c86-bdee-7238598c7e9c")]
        public string visiblesequenceNumber
        {
            get { return _visiblesequenceNumber; }
            set { _visiblesequenceNumber = value; }
        }

        string _visibleParentName;

        /// <summary>
        /// Gets or sets the value of variable visibleParentName.
        /// </summary>
        [TestVariable("75fbc945-05ba-42b9-9e47-8a42512522d6")]
        public string visibleParentName
        {
            get { return _visibleParentName; }
            set { _visibleParentName = value; }
        }

        string _visibleIsGroup;

        /// <summary>
        /// Gets or sets the value of variable visibleIsGroup.
        /// </summary>
        [TestVariable("2794a6f7-6f00-4061-b802-5206df843bf7")]
        public string visibleIsGroup
        {
            get { return _visibleIsGroup; }
            set { _visibleIsGroup = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable domain.
        /// </summary>
        [TestVariable("0e49bfa6-0c8f-4999-ad77-5babbb4e74af")]
        public string domain
        {
            get { return repo.domain; }
            set { repo.domain = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'ApplicationUnderTest.itemCreatedMessageToaster'", repo.ApplicationUnderTest.itemCreatedMessageToasterInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.itemCreatedMessageToasterInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.searchBar_typeplaceholder' at Center.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$itemName' with focus on 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.PressKeys(itemName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(4));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.firstElement_anyTag' and assigning its value to variable 'visibleItemName'.", repo.ApplicationUnderTest.firstElement_anyTagInfo, new RecordItemIndex(5));
            visibleItemName = repo.ApplicationUnderTest.firstElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.secondElement_anyTag' and assigning its value to variable 'visibleUnitType'.", repo.ApplicationUnderTest.secondElement_anyTagInfo, new RecordItemIndex(6));
            visibleUnitType = repo.ApplicationUnderTest.secondElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.thirdElement_anyTag' and assigning its value to variable 'visibleFieldType'.", repo.ApplicationUnderTest.thirdElement_anyTagInfo, new RecordItemIndex(7));
            visibleFieldType = repo.ApplicationUnderTest.thirdElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.fourthElement_anyTag' and assigning its value to variable 'visibleSiteBuildingRoom'.", repo.ApplicationUnderTest.fourthElement_anyTagInfo, new RecordItemIndex(8));
            visibleSiteBuildingRoom = repo.ApplicationUnderTest.fourthElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.fifthhElement_anyTag' and assigning its value to variable 'visiblesequenceNumber'.", repo.ApplicationUnderTest.fifthhElement_anyTagInfo, new RecordItemIndex(9));
            visiblesequenceNumber = repo.ApplicationUnderTest.fifthhElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.sixthElement_anyTag' and assigning its value to variable 'visibleParentName'.", repo.ApplicationUnderTest.sixthElement_anyTagInfo, new RecordItemIndex(10));
            visibleParentName = repo.ApplicationUnderTest.sixthElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.seventhElement_anyTag' and assigning its value to variable 'visibleIsGroup'.", repo.ApplicationUnderTest.seventhElement_anyTagInfo, new RecordItemIndex(11));
            visibleIsGroup = repo.ApplicationUnderTest.seventhElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(visibleItemName, itemName);
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(visibleUnitType, unitType);
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(visibleFieldType, fieldType);
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(visibleSiteBuildingRoom, siteBuildingRoom);
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(visiblesequenceNumber, sequenceNumber);
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(visibleParentName, parentName);
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(visibleIsGroup, isGroup);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(19));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.searchBar_typeplaceholder);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Back}' with focus on 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.PressKeys("{Back}");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
