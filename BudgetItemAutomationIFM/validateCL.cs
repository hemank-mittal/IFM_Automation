///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace BudgetItemAutomationIFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The validateCL recording.
    /// </summary>
    [TestModule("eb4fb2a6-c2fe-4fc5-af82-89fc7f3a4ea9", ModuleType.Recording, 1)]
    public partial class validateCL : ITestModule
    {
        /// <summary>
        /// Holds an instance of the BudgetItemAutomationIFMRepository repository.
        /// </summary>
        public static BudgetItemAutomationIFMRepository repo = BudgetItemAutomationIFMRepository.Instance;

        static validateCL instance = new validateCL();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public validateCL()
        {
            itemName = "";
            campusType = "";
            CL_Territory = "";
            completeAddress = "";
            CL_City = "";
            CL_County = "";
            _CL_State = "";
            CL_Country = "";
            CL_Zipcode = "";
            tempData = "";
            CL_address = "";
            completeTerritories = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static validateCL Instance
        {
            get { return instance; }
        }

#region Variables

        string _itemName;

        /// <summary>
        /// Gets or sets the value of variable itemName.
        /// </summary>
        [TestVariable("830e191a-97ca-4e40-86cb-0f5646a6f5bd")]
        public string itemName
        {
            get { return _itemName; }
            set { _itemName = value; }
        }

        string _campusType;

        /// <summary>
        /// Gets or sets the value of variable campusType.
        /// </summary>
        [TestVariable("12b09cde-6e40-42d0-b650-02844c127395")]
        public string campusType
        {
            get { return _campusType; }
            set { _campusType = value; }
        }

        string _CL_Territory;

        /// <summary>
        /// Gets or sets the value of variable CL_Territory.
        /// </summary>
        [TestVariable("cd4da2ac-4ca1-436c-ad72-d7997b7bef5c")]
        public string CL_Territory
        {
            get { return _CL_Territory; }
            set { _CL_Territory = value; }
        }

        string _completeAddress;

        /// <summary>
        /// Gets or sets the value of variable completeAddress.
        /// </summary>
        [TestVariable("b2c02475-a0df-4438-8b33-478b972c73d2")]
        public string completeAddress
        {
            get { return _completeAddress; }
            set { _completeAddress = value; }
        }

        string _CL_City;

        /// <summary>
        /// Gets or sets the value of variable CL_City.
        /// </summary>
        [TestVariable("362514b0-522f-4098-adbd-5ae4ed137388")]
        public string CL_City
        {
            get { return _CL_City; }
            set { _CL_City = value; }
        }

        string _CL_County;

        /// <summary>
        /// Gets or sets the value of variable CL_County.
        /// </summary>
        [TestVariable("22c03021-5d66-4d71-9f64-36568d4258e6")]
        public string CL_County
        {
            get { return _CL_County; }
            set { _CL_County = value; }
        }

        string __CL_State;

        /// <summary>
        /// Gets or sets the value of variable _CL_State.
        /// </summary>
        [TestVariable("09063853-fb91-431d-9b64-d38026ad2551")]
        public string _CL_State
        {
            get { return __CL_State; }
            set { __CL_State = value; }
        }

        string _CL_Zipcode;

        /// <summary>
        /// Gets or sets the value of variable CL_Zipcode.
        /// </summary>
        [TestVariable("026a75e4-f096-4d81-8855-8bd394b40173")]
        public string CL_Zipcode
        {
            get { return _CL_Zipcode; }
            set { _CL_Zipcode = value; }
        }

        string _tempData;

        /// <summary>
        /// Gets or sets the value of variable tempData.
        /// </summary>
        [TestVariable("13d01ae2-1053-4db2-a0d6-3a6eb7077076")]
        public string tempData
        {
            get { return _tempData; }
            set { _tempData = value; }
        }

        string _CL_address;

        /// <summary>
        /// Gets or sets the value of variable CL_address.
        /// </summary>
        [TestVariable("3622b999-47a4-4294-955a-79b5c0aabc4e")]
        public string CL_address
        {
            get { return _CL_address; }
            set { _CL_address = value; }
        }

        string _completeTerritories;

        /// <summary>
        /// Gets or sets the value of variable completeTerritories.
        /// </summary>
        [TestVariable("90759b80-2373-4760-9042-1af8c015d454")]
        public string completeTerritories
        {
            get { return _completeTerritories; }
            set { _completeTerritories = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable domain.
        /// </summary>
        [TestVariable("0e49bfa6-0c8f-4999-ad77-5babbb4e74af")]
        public string domain
        {
            get { return repo.domain; }
            set { repo.domain = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable CL_Country.
        /// </summary>
        [TestVariable("2339f9e4-b543-4f39-93fd-89960920a82d")]
        public string CL_Country
        {
            get { return repo.CL_country; }
            set { repo.CL_country = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'ApplicationUnderTest.itemCreatedMessageToaster'", repo.ApplicationUnderTest.itemCreatedMessageToasterInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.itemCreatedMessageToasterInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.searchBar_typeplaceholder' at Center.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$itemName' with focus on 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.PressKeys(itemName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(4));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$itemName) on item 'ApplicationUnderTest.firstElement_anyTag'.", repo.ApplicationUnderTest.firstElement_anyTagInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.ApplicationUnderTest.firstElement_anyTagInfo, "InnerText", itemName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$campusType) on item 'ApplicationUnderTest.secondElement_anyTag'.", repo.ApplicationUnderTest.secondElement_anyTagInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.secondElement_anyTagInfo, "InnerText", campusType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.integratedCLAddress' and assigning its value to variable 'completeAddress'.", repo.ApplicationUnderTest.integratedCLAddressInfo, new RecordItemIndex(7));
            completeAddress = repo.ApplicationUnderTest.integratedCLAddress.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            tempData = HelperMethodsCollection.concatStrings_spaces(CL_address, CL_City, CL_County, CL_Country, _CL_State, CL_Zipcode);
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(completeAddress, tempData);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.fourthElement_anyTag' and assigning its value to variable 'CL_Territory'.", repo.ApplicationUnderTest.fourthElement_anyTagInfo, new RecordItemIndex(10));
            CL_Territory = repo.ApplicationUnderTest.fourthElement_anyTag.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(CL_Territory, completeTerritories);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(12));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.searchBar_typeplaceholder);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Back}' with focus on 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.PressKeys("{Back}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(14));
            Delay.Duration(300, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
