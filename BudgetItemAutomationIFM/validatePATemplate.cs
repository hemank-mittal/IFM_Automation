///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace BudgetItemAutomationIFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The validatePATemplate recording.
    /// </summary>
    [TestModule("d97a9898-6717-44ad-9994-178562abff8c", ModuleType.Recording, 1)]
    public partial class validatePATemplate : ITestModule
    {
        /// <summary>
        /// Holds an instance of the BudgetItemAutomationIFMRepository repository.
        /// </summary>
        public static BudgetItemAutomationIFMRepository repo = BudgetItemAutomationIFMRepository.Instance;

        static validatePATemplate instance = new validatePATemplate();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public validatePATemplate()
        {
            itemName = "";
            linkedCateogry_1 = "";
            linkedCateogry_2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static validatePATemplate Instance
        {
            get { return instance; }
        }

#region Variables

        string _itemName;

        /// <summary>
        /// Gets or sets the value of variable itemName.
        /// </summary>
        [TestVariable("0c8b6728-831f-4667-8c78-ebb4bcb6def1")]
        public string itemName
        {
            get { return _itemName; }
            set { _itemName = value; }
        }

        string _linkedCateogry_1;

        /// <summary>
        /// Gets or sets the value of variable linkedCateogry_1.
        /// </summary>
        [TestVariable("c50834c9-27ae-4dea-b2a6-8cb740593d21")]
        public string linkedCateogry_1
        {
            get { return _linkedCateogry_1; }
            set { _linkedCateogry_1 = value; }
        }

        string _linkedCateogry_2;

        /// <summary>
        /// Gets or sets the value of variable linkedCateogry_2.
        /// </summary>
        [TestVariable("b4b37ee4-d76e-4a5a-b6c5-fbea27ebc46c")]
        public string linkedCateogry_2
        {
            get { return _linkedCateogry_2; }
            set { _linkedCateogry_2 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable domain.
        /// </summary>
        [TestVariable("0e49bfa6-0c8f-4999-ad77-5babbb4e74af")]
        public string domain
        {
            get { return repo.domain; }
            set { repo.domain = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '' on item 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.Element.SetAttributeValue("TagValue", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.searchBar_typeplaceholder' at Center.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$itemName' with focus on 'ApplicationUnderTest.searchBar_typeplaceholder'.", repo.ApplicationUnderTest.searchBar_typeplaceholderInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.searchBar_typeplaceholder.PressKeys(itemName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(3));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.firstElement_anyTag' at Center.", repo.ApplicationUnderTest.firstElement_anyTagInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.firstElement_anyTag.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$itemName) on item 'ApplicationUnderTest.TitleInputBar'.", repo.ApplicationUnderTest.TitleInputBarInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.ApplicationUnderTest.TitleInputBarInfo, "TagValue", itemName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$linkedCateogry_1) on item 'ApplicationUnderTest.PaymentApplicationTemplateData.PALinkedCategories_1'.", repo.ApplicationUnderTest.PaymentApplicationTemplateData.PALinkedCategories_1Info, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.PaymentApplicationTemplateData.PALinkedCategories_1Info, "InnerText", linkedCateogry_1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$linkedCateogry_2) on item 'ApplicationUnderTest.PaymentApplicationTemplateData.PALinkedCategories_2'.", repo.ApplicationUnderTest.PaymentApplicationTemplateData.PALinkedCategories_2Info, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.ApplicationUnderTest.PaymentApplicationTemplateData.PALinkedCategories_2Info, "InnerText", linkedCateogry_2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.PaymentApplicationTemplateData.Back' at Center.", repo.ApplicationUnderTest.PaymentApplicationTemplateData.BackInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.PaymentApplicationTemplateData.Back.Click();
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.waitForLoading();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
