///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace BudgetItemAutomationIFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The validateEditAddition recording.
    /// </summary>
    [TestModule("a8abbcc4-5202-4c6b-bb1d-f3325104d802", ModuleType.Recording, 1)]
    public partial class validateEditAddition : ITestModule
    {
        /// <summary>
        /// Holds an instance of the BudgetItemAutomationIFMRepository repository.
        /// </summary>
        public static BudgetItemAutomationIFMRepository repo = BudgetItemAutomationIFMRepository.Instance;

        static validateEditAddition instance = new validateEditAddition();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public validateEditAddition()
        {
            addedItem = "name";
            compareTo = "";
            optionIndex = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static validateEditAddition Instance
        {
            get { return instance; }
        }

#region Variables

        string _compareTo;

        /// <summary>
        /// Gets or sets the value of variable compareTo.
        /// </summary>
        [TestVariable("941e2e19-b561-4fad-9e8b-1162f6c6673f")]
        public string compareTo
        {
            get { return _compareTo; }
            set { _compareTo = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable addedItem.
        /// </summary>
        [TestVariable("772ed8b9-b30c-40fc-8352-a352ba57046a")]
        public string addedItem
        {
            get { return repo.addedItem; }
            set { repo.addedItem = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable optionIndex.
        /// </summary>
        [TestVariable("ba0d903b-aba2-4657-81b6-7e8a96f744c2")]
        public string optionIndex
        {
            get { return repo.optionIndex; }
            set { repo.optionIndex = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking WaitForDocumentLoaded() on item 'ApplicationUnderTest'.", repo.ApplicationUnderTest.SelfInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Self.WaitForDocumentLoaded();
            Delay.Milliseconds(0);
            
            //addedItem = HelperMethodsCollection.trimStrings(addedItem, "both");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Content1.addedItemToTemplate' and assigning its value to variable 'compareTo'.", repo.ApplicationUnderTest.Content1.addedItemToTemplateInfo, new RecordItemIndex(2));
            compareTo = repo.ApplicationUnderTest.Content1.addedItemToTemplate.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.compareStrings(addedItem, compareTo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ApplicationUnderTest.Content1.addedItemToTemplate'.", repo.ApplicationUnderTest.Content1.addedItemToTemplateInfo, new RecordItemIndex(4));
            Validate.Exists(repo.ApplicationUnderTest.Content1.addedItemToTemplateInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Content1.MatExpansionPanelHeader1' at Center.", repo.ApplicationUnderTest.Content1.MatExpansionPanelHeader1Info, new RecordItemIndex(5));
            repo.ApplicationUnderTest.Content1.MatExpansionPanelHeader1.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
