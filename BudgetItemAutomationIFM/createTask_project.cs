///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace BudgetItemAutomationIFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The createTask_project recording.
    /// </summary>
    [TestModule("9afbc7fe-dc24-4830-b4f8-e04ab9e16808", ModuleType.Recording, 1)]
    public partial class createTask_project : ITestModule
    {
        /// <summary>
        /// Holds an instance of the BudgetItemAutomationIFMRepository repository.
        /// </summary>
        public static BudgetItemAutomationIFMRepository repo = BudgetItemAutomationIFMRepository.Instance;

        static createTask_project instance = new createTask_project();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public createTask_project()
        {
            itemCount = "";
            newTemplateName = "";
            optionIndex = "";
            selectedAssignee = "";
            priority = "";
            description = "";
            estimatedHours = "";
            startDate = "";
            endDate = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static createTask_project Instance
        {
            get { return instance; }
        }

#region Variables

        string _itemCount;

        /// <summary>
        /// Gets or sets the value of variable itemCount.
        /// </summary>
        [TestVariable("112cad4c-f594-4a29-967e-a9e24995e154")]
        public string itemCount
        {
            get { return _itemCount; }
            set { _itemCount = value; }
        }

        string _selectedAssignee;

        /// <summary>
        /// Gets or sets the value of variable selectedAssignee.
        /// </summary>
        [TestVariable("3c23af72-1d1a-4140-aa9d-7f5a67b17c56")]
        public string selectedAssignee
        {
            get { return _selectedAssignee; }
            set { _selectedAssignee = value; }
        }

        string _priority;

        /// <summary>
        /// Gets or sets the value of variable priority.
        /// </summary>
        [TestVariable("26582e50-0b41-4121-bfef-8fce33fb3fc2")]
        public string priority
        {
            get { return _priority; }
            set { _priority = value; }
        }

        string _description;

        /// <summary>
        /// Gets or sets the value of variable description.
        /// </summary>
        [TestVariable("4c042ac1-f422-4224-bcf8-2e812d61c636")]
        public string description
        {
            get { return _description; }
            set { _description = value; }
        }

        string _estimatedHours;

        /// <summary>
        /// Gets or sets the value of variable estimatedHours.
        /// </summary>
        [TestVariable("912b2d73-0814-46f3-949f-45ba5c53aae4")]
        public string estimatedHours
        {
            get { return _estimatedHours; }
            set { _estimatedHours = value; }
        }

        string _startDate;

        /// <summary>
        /// Gets or sets the value of variable startDate.
        /// </summary>
        [TestVariable("6d20ae21-fdc1-4f4a-aa81-ded79f74ef46")]
        public string startDate
        {
            get { return _startDate; }
            set { _startDate = value; }
        }

        string _endDate;

        /// <summary>
        /// Gets or sets the value of variable endDate.
        /// </summary>
        [TestVariable("437d2b40-f7f0-423b-87d1-57764d3de526")]
        public string endDate
        {
            get { return _endDate; }
            set { _endDate = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable domain.
        /// </summary>
        [TestVariable("0e49bfa6-0c8f-4999-ad77-5babbb4e74af")]
        public string domain
        {
            get { return repo.domain; }
            set { repo.domain = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable optionIndex.
        /// </summary>
        [TestVariable("f5817fc4-1aa5-44d2-814e-119dde8a8166")]
        public string optionIndex
        {
            get { return repo.optionIndex; }
            set { repo.optionIndex = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable newTemplateName.
        /// </summary>
        [TestVariable("dc11877c-6e58-4e21-a6fc-f5727a63fa3f")]
        public string newTemplateName
        {
            get { return repo.newTemplateName; }
            set { repo.newTemplateName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            HelperMethodsCollection.waitForLoading();
            Delay.Milliseconds(0);
            
            itemCount = ValueConverter.ToString(HelperMethodsCollection.getNumberOfRecordsFromFooter(repo.ApplicationUnderTest.itemCountMsg));
            Delay.Milliseconds(0);
            
            newTemplateName = HelperMethodsCollection.getNewCreateItem(ValueConverter.ArgumentFromString<int>("nextCount", itemCount), "item");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createSpanTag' at Center.", repo.ApplicationUnderTest.createSpanTagInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.createSpanTag.Click();
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.waitForLoading();
            Delay.Milliseconds(0);
            
            // Remove above portion after Grid implementation
            Report.Log(ReportLevel.Info, "Section", "Remove above portion after Grid implementation", new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_TaskTitle' at Center.", repo.ApplicationUnderTest.createTask_project_TaskTitleInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.createTask_project_TaskTitle.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$newTemplateName' with focus on 'ApplicationUnderTest.createTask_project_TaskTitle'.", repo.ApplicationUnderTest.createTask_project_TaskTitleInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.createTask_project_TaskTitle.PressKeys(newTemplateName);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_Description' at Center.", repo.ApplicationUnderTest.createTask_project_DescriptionInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.createTask_project_Description.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$description' with focus on 'ApplicationUnderTest.createTask_project_Description'.", repo.ApplicationUnderTest.createTask_project_DescriptionInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.createTask_project_Description.PressKeys(description);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_selectAssigneeDropdown' at Center.", repo.ApplicationUnderTest.createTask_project_selectAssigneeDropdownInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.createTask_project_selectAssigneeDropdown.Click();
            Delay.Milliseconds(0);
            
            optionIndex = ValueConverter.ToString(HelperMethodsCollection.getDifferentOption(repo.ApplicationUnderTest.visibleDropdown_ul));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.visibleDropdown_ul_dynamic' and assigning its value to variable 'selectedAssignee'.", repo.ApplicationUnderTest.visibleDropdown_ul_dynamicInfo, new RecordItemIndex(12));
            selectedAssignee = repo.ApplicationUnderTest.visibleDropdown_ul_dynamic.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.visibleDropdown_ul_dynamic' at Center.", repo.ApplicationUnderTest.visibleDropdown_ul_dynamicInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.visibleDropdown_ul_dynamic.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_selectAssigneeDropdown' at Center.", repo.ApplicationUnderTest.createTask_project_selectAssigneeDropdownInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.createTask_project_selectAssigneeDropdown.Click();
            Delay.Milliseconds(0);
            
            // These actions are temporary, please add correct ones, once fixed
            Report.Log(ReportLevel.Info, "Section", "These actions are temporary, please add correct ones, once fixed", new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_startDate' at Center.", repo.ApplicationUnderTest.createTask_project_startDateInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.createTask_project_startDate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$startDate' with focus on 'ApplicationUnderTest.createTask_project_startDate'.", repo.ApplicationUnderTest.createTask_project_startDateInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.createTask_project_startDate.PressKeys(startDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.createTask_project_startDate'.", repo.ApplicationUnderTest.createTask_project_startDateInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.createTask_project_startDate.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_endDate' at Center.", repo.ApplicationUnderTest.createTask_project_endDateInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.createTask_project_endDate.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$endDate' with focus on 'ApplicationUnderTest.createTask_project_endDate'.", repo.ApplicationUnderTest.createTask_project_endDateInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.createTask_project_endDate.PressKeys(endDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.createTask_project_endDate'.", repo.ApplicationUnderTest.createTask_project_endDateInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.createTask_project_endDate.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            // Missing fields - Dates - Issues spotted
            Report.Log(ReportLevel.Info, "Section", "Missing fields - Dates - Issues spotted", new RecordItemIndex(22));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_priorityDropdown' at Center.", repo.ApplicationUnderTest.createTask_project_priorityDropdownInfo, new RecordItemIndex(23));
            repo.ApplicationUnderTest.createTask_project_priorityDropdown.Click();
            Delay.Milliseconds(0);
            
            optionIndex = ValueConverter.ToString(HelperMethodsCollection.getDifferentOption(repo.ApplicationUnderTest.listbox_DropdownList));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.listbox_dynamicOption' and assigning its value to variable 'priority'.", repo.ApplicationUnderTest.listbox_dynamicOptionInfo, new RecordItemIndex(25));
            priority = repo.ApplicationUnderTest.listbox_dynamicOption.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.listbox_dynamicOption' at Center.", repo.ApplicationUnderTest.listbox_dynamicOptionInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.listbox_dynamicOption.Click();
            Delay.Milliseconds(0);
            
            estimatedHours = ValueConverter.ToString(HelperMethodsCollection.getEditedNumber(ValueConverter.ArgumentFromString<int>("oldNumber", "0")));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.createTask_project_estimatedHours' at Center.", repo.ApplicationUnderTest.createTask_project_estimatedHoursInfo, new RecordItemIndex(28));
            repo.ApplicationUnderTest.createTask_project_estimatedHours.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$estimatedHours' with focus on 'ApplicationUnderTest.createTask_project_estimatedHours'.", repo.ApplicationUnderTest.createTask_project_estimatedHoursInfo, new RecordItemIndex(29));
            repo.ApplicationUnderTest.createTask_project_estimatedHours.PressKeys(estimatedHours);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.buttonTagSave' at Center.", repo.ApplicationUnderTest.buttonTagSaveInfo, new RecordItemIndex(30));
            repo.ApplicationUnderTest.buttonTagSave.Click();
            Delay.Milliseconds(0);
            
            HelperMethodsCollection.waitForLoading();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
