///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Automation_CreateNewClient_IFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The createNewClient recording.
    /// </summary>
    [TestModule("6e8ac0d5-7f4f-40a5-b9e4-1113b986b9c1", ModuleType.Recording, 1)]
    public partial class CreateNewClient : ITestModule
    {
        /// <summary>
        /// Holds an instance of the Automation_CreateNewClient_IFMRepository repository.
        /// </summary>
        public static Automation_CreateNewClient_IFMRepository repo = Automation_CreateNewClient_IFMRepository.Instance;

        static CreateNewClient instance = new CreateNewClient();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateNewClient()
        {
            firstName = "";
            lastName = "";
            email = "";
            clientName = "";
            itemCount = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateNewClient Instance
        {
            get { return instance; }
        }

#region Variables

        string _firstName;

        /// <summary>
        /// Gets or sets the value of variable firstName.
        /// </summary>
        [TestVariable("9f6cb8b0-94e6-4495-8c2e-536d86ddcc70")]
        public string firstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        string _lastName;

        /// <summary>
        /// Gets or sets the value of variable lastName.
        /// </summary>
        [TestVariable("e6179021-6b93-48b5-b9cb-503a3f638537")]
        public string lastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        string _email;

        /// <summary>
        /// Gets or sets the value of variable email.
        /// </summary>
        [TestVariable("6541cbd8-08b6-4ab0-be5f-c999a4981bf5")]
        public string email
        {
            get { return _email; }
            set { _email = value; }
        }

        string _clientName;

        /// <summary>
        /// Gets or sets the value of variable clientName.
        /// </summary>
        [TestVariable("bb7e0326-fb71-4fa7-ac30-4dedf91bb65a")]
        public string clientName
        {
            get { return _clientName; }
            set { _clientName = value; }
        }

        string _itemCount;

        /// <summary>
        /// Gets or sets the value of variable itemCount.
        /// </summary>
        [TestVariable("9912d56e-dec5-4323-bc2b-4740fba9ac49")]
        public string itemCount
        {
            get { return _itemCount; }
            set { _itemCount = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'ApplicationUnderTest.FaFaSpinFaSpinner'", repo.ApplicationUnderTest.FaFaSpinFaSpinnerInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.FaFaSpinFaSpinnerInfo.WaitForNotExists(30000);
            
            itemCount = ValueConverter.ToString(BudgetItemAutomationIFM.HelperMethodsCollection.getNumberOfRecordsFromFooter(repo.ApplicationUnderTest.showingNumberOfRecords));
            Delay.Milliseconds(0);
            
            email = BudgetItemAutomationIFM.HelperMethodsCollection.getNewCreateItem(ValueConverter.ArgumentFromString<int>("nextCount", itemCount), "email");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ButtonTagRegister' at Center.", repo.ApplicationUnderTest.ButtonTagRegisterInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.ButtonTagRegister.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'ApplicationUnderTest.FaFaSpinFaSpinner'", repo.ApplicationUnderTest.FaFaSpinFaSpinnerInfo, new ActionTimeout(30000), new RecordItemIndex(4));
            repo.ApplicationUnderTest.FaFaSpinFaSpinnerInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.RegisterForm.Firstname' at Center.", repo.ApplicationUnderTest.RegisterForm.FirstnameInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.RegisterForm.Firstname.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$firstName' with focus on 'ApplicationUnderTest.RegisterForm.Firstname'.", repo.ApplicationUnderTest.RegisterForm.FirstnameInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.RegisterForm.Firstname.PressKeys(firstName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.RegisterForm.Lastname' at Center.", repo.ApplicationUnderTest.RegisterForm.LastnameInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.RegisterForm.Lastname.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$lastName' with focus on 'ApplicationUnderTest.RegisterForm.Lastname'.", repo.ApplicationUnderTest.RegisterForm.LastnameInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.RegisterForm.Lastname.PressKeys(lastName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.RegisterForm.Email' at Center.", repo.ApplicationUnderTest.RegisterForm.EmailInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.RegisterForm.Email.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$email' with focus on 'ApplicationUnderTest.RegisterForm.Email'.", repo.ApplicationUnderTest.RegisterForm.EmailInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.RegisterForm.Email.PressKeys(email);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.RegisterForm.Company' at Center.", repo.ApplicationUnderTest.RegisterForm.CompanyInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.RegisterForm.Company.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$clientName' with focus on 'ApplicationUnderTest.RegisterForm.Company'.", repo.ApplicationUnderTest.RegisterForm.CompanyInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.RegisterForm.Company.PressKeys(clientName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ButtonTagSubmit' at Center.", repo.ApplicationUnderTest.ButtonTagSubmitInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.ButtonTagSubmit.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
