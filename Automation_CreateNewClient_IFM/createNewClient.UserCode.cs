///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

using System.Linq;
using System.IO;

namespace Automation_CreateNewClient_IFM
{
    public partial class CreateNewClient
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public string getNewCreateItem(int nextCount, string itemType)
        {
        	string newItem = null;
        	
        	if(itemType.ToLower() == "item")
        	{
        		newItem = "test item " + nextCount.ToString();
        	}
        	else if(itemType.ToLower() == "template")
        	{
        		newItem = "test template " + nextCount.ToString();
        	}
        	else
        	{
        		newItem = "test element " + nextCount.ToString();
        	}
        	
//        	Report.Warn(newItem);
        	return newItem;
        }

        public int getNumberOfRecordsFromFooter(Adapter element)
        {
        	        
        	var text = element.GetAttributeValue<string>("InnerText");						
			var matches = System.Text.RegularExpressions.Regex.Matches(text, @"\d+");
    
		    // Convert matches to a list of integers
		    var numbers = matches.Cast<System.Text.RegularExpressions.Match>()
		                         .Select(m => int.Parse(m.Value))
		                         .ToList();
		    
		    int maxNumber = numbers.Max() + 1;
        	
			return maxNumber;
        }

    }
}
