///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Automation_CreateNewClient_IFM
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The isLoggedInAsProductAdmin recording.
    /// </summary>
    [TestModule("23c8ceb5-cd18-4287-bed9-2c568bbabb87", ModuleType.Recording, 1)]
    public partial class isLoggedInAsProductAdmin : ITestModule
    {
        /// <summary>
        /// Holds an instance of the Automation_CreateNewClient_IFMRepository repository.
        /// </summary>
        public static Automation_CreateNewClient_IFMRepository repo = Automation_CreateNewClient_IFMRepository.Instance;

        static isLoggedInAsProductAdmin instance = new isLoggedInAsProductAdmin();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public isLoggedInAsProductAdmin()
        {
            pageURL = "";
            assignedRole = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static isLoggedInAsProductAdmin Instance
        {
            get { return instance; }
        }

#region Variables

        string _pageURL;

        /// <summary>
        /// Gets or sets the value of variable pageURL.
        /// </summary>
        [TestVariable("a8505506-489a-4045-bf01-2f9d4cde8544")]
        public string pageURL
        {
            get { return _pageURL; }
            set { _pageURL = value; }
        }

        string _assignedRole;

        /// <summary>
        /// Gets or sets the value of variable assignedRole.
        /// </summary>
        [TestVariable("144a5ea9-ad54-451f-be43-f192a05befe5")]
        public string assignedRole
        {
            get { return _assignedRole; }
            set { _assignedRole = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking WaitForDocumentLoaded() on item 'ApplicationUnderTest'.", repo.ApplicationUnderTest.SelfInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Self.WaitForDocumentLoaded();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'ApplicationUnderTest.FaFaSpinFaSpinner'", repo.ApplicationUnderTest.FaFaSpinFaSpinnerInfo, new ActionTimeout(30000), new RecordItemIndex(1));
            repo.ApplicationUnderTest.FaFaSpinFaSpinnerInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Path' from item 'ApplicationUnderTest' and assigning its value to variable 'pageURL'.", repo.ApplicationUnderTest.SelfInfo, new RecordItemIndex(2));
            pageURL = repo.ApplicationUnderTest.Self.Element.GetAttributeValueText("Path");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Warn, "User", pageURL, new RecordItemIndex(3));
            
            try {
                assignedRole = repo.ApplicationUnderTest.assignedRole.Element.GetAttributeValueText("InnerText");
                Delay.Milliseconds(0);
            } catch(Exception) {  }
            
            Report.Log(ReportLevel.Warn, "User", assignedRole, new RecordItemIndex(5));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
